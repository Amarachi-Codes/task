// Given a day of the week encoded as 0=Sun, 1=Mon, 2=Tue, ...6=Sat,
// and a boolean indicating if we are on vacation,
// return a string of the form "7:00" indicating when the alarm
// clock should ring. Weekdays, the alarm should be "7:00" and on
// the weekend it should be "10:00". Unless we are on vacation -- then on
//  weekdays it should be "10:00" and weekends it should be "off".

// Examples

// alarmClock(1, false) → 7:00
// alarmClock(5, false) → 7:00
// alarmClock(0, false) → 10:00


// function alarmClock(weekDay, isVacation){
// 	if(weekDay >= 1 && weekDay <= 5 && isVacation){
// 		return "10:00"
// 	}if((weekDay === 6 || weekDay === 0) && isVacation){
// 		return "off"
// 	}if(weekDay >=1 && weekDay <= 5 && !isVacation){
// 		return "7:00"
// 	}if((weekDay === 6 || weekDay ===0) && !isVacation){
// 		return "10:00"
// 	}
// }console.log(alarmClock(0, false))

// You and your date are trying to get a table at a restaurant. 
// The parameter "you" is the stylishness of your clothes, 
// in the range 0..10, and "date" is the stylishness of your 
// date's clothes. The result getting the table is encoded as 
// an int value with 0=no, 1=maybe, 2=yes. If either of you 
// is very stylish, 8 or more, then the result is 2 (yes). 
// With the exception that if either of you has style of 2 or less,
//  then the result is 0 (no). Otherwise the result is 1 (maybe).

// Examples

// dateFashion(5, 10) → 2
// dateFashion(5, 2) → 0
// dateFashion(5, 5) → 1

// function dateFashion(you,date){
// 	if(you <=2 || date<= 2){
// 		return 0
// 	}if(you >=8 || date >= 8){
// 		return 2
// 	}else{
// 		return 1
// 	}
// }console.log(dateFashion(5, 5))

//  Logic-2 -- makeBricks
// We want to make a row of bricks that is goal inches long. We have a number of small bricks (1 inch each) and 
// big bricks (5 inches each). Return true if it is possible to make the goal by choosing from the given bricks. 
// This is a little harder than it looks and can be done without any loops. See also: Introduction to MakeBricks

// Examples

// makeBricks(3, 1, 8) → true
// makeBricks(3, 1, 9) → false
// makeBricks(3, 2, 10) → true
 


//find the winner between vowel and consonant in any given string.
//e.g doris => consonant wins
//mike => draw
//ada =>vowel wins
// function winner(str){
// 	str.toLowerCase
// 	let vowel = "aeiou"
// 	vowel.split("");
// 	let vCount = 0;
// 	let cCount = 0;
// for(i=0; i<str.length; i++){
// 	let character= str[i]
// 	if(vowel.includes(character)){
// 		vCount++
// 	}else {
// 		cCount++
// 	}
// }if(vCount === cCount){
// 	return draw
// }if(vCount > cCount){
// 	return "Vowels"
// }
// 	return "consonants"
// }
	
// console.log(winner("ada"))

// function winner(str){
// 	str.toLowerCase
// 	let vowel= "aeiou";
// 	vowel.split(" ");
// 	let vCount= 0;
// 	let cCount=0;
// 	for(let i=0; i < str.length; i++){
// 		let character = str[i];
// 		if(vowel.includes(character)){
// 			vCount++
// 		}else{
// 			cCount++
// 		}
// 	}if(vCount=== cCount){
// 		return "draw"
// 	}if(vCount > cCount){
// 		return "Vowel wins"
// 	}return "Consonant wins"
// }console.log(winner("adannaya"))

// write a javascript program to determine if a particular string is a palidrone.
// A palindrome is a word that reads the same backward as forward.
// For example: madam, racecar etc are all palindromes.
// ada =>ada
// madam =>madam

// function palindrome(str){
// 	let result = ""
// 	for(i = str.length-1; i >= 0; i--){
// 		let char = str.charAt(i)
// 		result+=char	
// 	}return result===str;
// }console.log(palindrome("ada"))


// 

// / Given a string, remove all numbers from string and return the removed numbers.
// // e.g ada2700 => 27000
// // do45ris7 =>457


// Given a string and a letter, count the number of times the letter appears within the string
// For example: Adanna – a –(3)	

// Given a word, write a function to remove the white spaces in the word 
// e.g”      Contemporary         ”

// Write a function to check if the word ends with a d
// e.g- ENTERED
// COMPULSORY
// DECIDED

// Write a function to check if a string includes c , count the number of C’s in that string
// e.g Chisco--2
// Chancellor--2
// Chandelier--1
// Chair—1

// Write a function that converts a str to lowercase and checks for the length of the string and gets a sub string from the string
// e.g lovingKindness(kind)
// // The squirrels in Palo Alto spend most of the day playing. In particular, 
// // they play if the temperature is between 60 and 90 (inclusive). 
// // Unless it is summer, then the upper limit is 100 instead of 90.
// //  Given an int temperature and a boolean isSummer, return true 
// //  if the squirrels play and false otherwise.

// // Examples

// // squirrelPlay(70, false) → true
// // squirrelPlay(95, false) → false
// // squirrelPlay(95, true) → true

// // When squirrels get together for a party, they like to have cigars. 
// // A squirrel party is successful when the number of cigars is 
// // between 40 and 60, inclusive. Unless it is the weekend, 
// // in which case there is no upper bound on the number of cigars. 
// // Return true if the party with the given values is successful, or false otherwise.

// // cigarParty(30, false) → false
// // cigarParty(50, false) → true
// // cigarParty(70, true) → true


// // Given 2 ints, a and b, return their sum. However, 
// // sums in the range 10..19 inclusive, are forbidden,
// //  so in that case just return 20.

// // Examples

// // sortaSum(3, 4) → 7
// // sortaSum(9, 4) → 20
// // sortaSum(10, 11) → 21

// Write a function to add two numbers
// Write a function to get the highest number in an array and repeat the number 5 times
// e.g arr= [34,56,78,93,104,45,22,11]—[104,104,104,104,104]
// Using a Javascript inbuilt function, get the highest number in the array- e.g [20,4,44,51,90,88]

// Write a function to check if the sum of two items in an array equals a number, return the two numbers
// e.g arr =[5,7,8,4,2,]- 10 returns[8,2]

// An ATM only has 100, 20, 9, and 1 Naira bills (NGN) available to be dispensed.

// Given an amount between 0 and 10,000 Naira (inclusive) and assuming that the ATM wants to use as few bills as possible,
//  determinate the minimal number of 100, 20, 9 and 1 Naira bills the ATM needs to dispense (in that order).

// function dispense(amt){
// 	let minimal = [100, 20, 9, 1]
// 	let result = []
// 	for(let i =0; i < minimal.length; i++){
// 		let values = minimal[i]
// 		result.push(amt/values)

// 	}return result
// }console.log(dispense(1000))



//  Complete the method/function so that it converts dash/underscore delimited words into camel casing. 
// The first word within the output should be capitalized only if the original word was capitalized  (known as Upper Camel Case,
// 	 also often referred to as Pascal case).

// EXAMPLES:
//     A) "the-stealth-warrior" gets converted to "theStealthWarrior"
//     B) "The_Stealth_Warrior" gets converted to "TheStealthWarrior"

function camelCasing(str){
	let result =""
	let remainingstr= ""
	for(let i = 0; i < str.length; i++){
		let char = str.charAt(i)
		if(char.includes("-") || char.includes("_")){
			char.split("-")
			
			
			result+=char
	}else{
		remainingstr+=char
	}
	}return remainingstr

} console.log(camelCasing("The_stealth_warrior"))
